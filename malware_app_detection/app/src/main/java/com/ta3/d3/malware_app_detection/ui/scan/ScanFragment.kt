package com.ta3.d3.malware_app_detection.ui.scan

import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.fragment.app.commit
import androidx.fragment.app.replace
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.GridLayoutManager
import com.ta3.d3.malware_app_detection.MyActivityViewModel
import com.ta3.d3.malware_app_detection.R
import com.ta3.d3.malware_app_detection.adapter.AppListAdapter
import com.ta3.d3.malware_app_detection.databinding.ScanFragmentBinding
import com.ta3.d3.malware_app_detection.model.AppInfo
import com.ta3.d3.malware_app_detection.ui.algoritma.AlogrithmSelectFragment

class ScanFragment : Fragment() {

    companion object {
        fun newInstance() = ScanFragment()
    }

    private var _binding : ScanFragmentBinding? = null

    private val binding get() = _binding!!

//    private lateinit var viewModel: ScanViewModel

    private val model : MyActivityViewModel by activityViewModels()

    override fun onResume() {
        super.onResume()
        println("Back Here")
        checkVisible()
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = ScanFragmentBinding.inflate(inflater, container, false)

        binding.btnScan.setOnClickListener {
            model.selectedalgorithm = 0
            findNavController().navigate(R.id.action_navigation_scan_to_alogrithmSelectFragment)
        }
        binding.btnCancel.setOnClickListener {
            model.selected.forEach {
                it.isChecked = false
            }
            model.selected = mutableListOf()
            binding.btnCancel.visibility = View.GONE
            binding.btnScan.visibility = View.GONE
            binding.rcViewAppList.setPadding(10,10,10,10)

            val pm : PackageManager = activity?.packageManager!!
            binding.rcViewAppList.adapter = AppListAdapter(model.appInfos, pm, ::callBackAfterClick)
        }
        return binding.root
    }

    override fun onActivityCreated(savedInstanceState: Bundle?) {
        super.onActivityCreated(savedInstanceState)
        // TODO: Use the ViewModel


        var apps : MutableList<AppInfo> = mutableListOf()
        val pm : PackageManager = activity?.packageManager!!
        if(model.appInfos.size <= 0){

            pm.getInstalledApplications(PackageManager.GET_META_DATA).forEach {
                if((it.flags and ApplicationInfo.FLAG_SYSTEM) == 0){
                    apps.add(AppInfo(it, it.loadLabel(pm) as String))
                }
            }
            apps.sortBy { it.label }
            model.appInfos = apps

        }else{
            apps = model.appInfos
        }
        binding.rcViewAppList.layoutManager = GridLayoutManager(this.context, 4)
        binding.rcViewAppList.adapter = AppListAdapter(apps, pm, ::callBackAfterClick)

        checkVisible()
    }

    fun callBackAfterClick(position: Int, appInfo: AppInfo): Int{

        if(appInfo.isChecked){
            model.selected.add(appInfo)
        }else{
            var found = model.selected.find { it == appInfo }
            if(found != null){
                model.selected.remove(found)
            }
        }
        checkVisible()
        binding.btnScan.text = "SCAN ( " + model.selected.size.toString() + " )"
        return 0
    }

    fun checkVisible(){
        if(model.selected.size > 0){
            binding.wrapperButton.visibility = View.VISIBLE
        }else{
            binding.wrapperButton.visibility = View.GONE
        }
    }
}