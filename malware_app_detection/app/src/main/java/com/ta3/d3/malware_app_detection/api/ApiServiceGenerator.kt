package com.ta3.d3.malware_app_detection.api

import com.ta3.d3.malware_app_detection.BuildConfig
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

class ApiServiceGenerator {
    val TIME_OUT = 1L
    val API_BASE_URL_RANDOM_FOREST = "http://156.67.218.59:8002/"
    val API_BASE_URL_XG_BOOST = "http://156.67.218.59:8001/"

    private val client = OkHttpClient().newBuilder()
        .addInterceptor(HttpLoggingInterceptor().apply {
            level = if(BuildConfig.DEBUG) HttpLoggingInterceptor.Level.BODY else HttpLoggingInterceptor.Level.NONE
        }).readTimeout(TIME_OUT, TimeUnit.HOURS)
        .writeTimeout(TIME_OUT, TimeUnit.HOURS)
        .connectTimeout(TIME_OUT, TimeUnit.HOURS)
        .build()
    private val retrofitRF = Retrofit.Builder()
        .baseUrl(API_BASE_URL_RANDOM_FOREST)
        .client(client)
        .addConverterFactory(GsonConverterFactory.create())
        .build()
    val createServiceRF: ApiServices = retrofitRF.create(ApiServices::class.java)

    private val retrofitXGB = Retrofit.Builder()
        .baseUrl(API_BASE_URL_XG_BOOST)
        .client(client)
        .addConverterFactory(GsonConverterFactory.create())
        .build()
    val createServiceXGB: ApiServices = retrofitXGB.create(ApiServices::class.java)
}