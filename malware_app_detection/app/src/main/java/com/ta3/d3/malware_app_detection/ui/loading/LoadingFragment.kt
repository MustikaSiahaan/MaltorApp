package com.ta3.d3.malware_app_detection.ui.loading

import android.os.Bundle
import android.os.Handler
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.ta3.d3.malware_app_detection.MyActivityViewModel
import com.ta3.d3.malware_app_detection.R
import com.ta3.d3.malware_app_detection.api.ApiServiceGenerator
import com.ta3.d3.malware_app_detection.databinding.FragmentLoadingBinding
import com.ta3.d3.malware_app_detection.model.ApiReponse
import com.ta3.d3.malware_app_detection.model.AppInfoResult
import okhttp3.MediaType
import okhttp3.MultipartBody
import okhttp3.RequestBody
import retrofit2.Call
import retrofit2.Response
import java.io.File
import java.util.*

// TODO: Rename parameter arguments, choose names that match
// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"

/**
 * A simple [Fragment] subclass.
 * Use the [LoadingFragment.newInstance] factory method to
 * create an instance of this fragment.
 */
class LoadingFragment : Fragment() {

    private var _binding : FragmentLoadingBinding? = null

    private val binding get() = _binding!!
    lateinit var call : Call<ApiReponse>
    private val model : MyActivityViewModel by activityViewModels()
    private var files : MutableList<File> = mutableListOf()
    private var current = 0
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        _binding = FragmentLoadingBinding.inflate(inflater, container, false)

//        Handler().postDelayed({
//            Log.i("SELECTED", model.selectedalgorithm.toString())
//            if(model.selectedalgorithm == 2){
//                findNavController().navigate(R.id.action_loadingFragment_to_errorFragment)
//            }else{
//                var temp : MutableList<AppInfoResult> = mutableListOf()
//                model.selected.forEach {
//                    temp.add(AppInfoResult(it.info, it.label,"App safe to use", "No Malware", "No Dangerous"))
//                }
//                model.result = temp
//                findNavController().navigate(R.id.action_loadingFragment_to_resultFragment)
//            }
//        }, 2000)

        binding.algorithmUsed.text = "Scanning Apps Using\n ${if(model.selectedalgorithm == 1) "XGBoost Algorithm" else "Random Forest Algorithm"}"
        model.selected.forEach {
            files.add(File(it.info.publicSourceDir))
        }
        Log.i("HELLO_MALWARE", files.size.toString())
        checkAllFilesApp()

        return binding.root
    }

    fun checkAllFilesApp(){
        try {
            binding.scanningAppName.text = "Start scan ${model.selected[current].label}"
            var rForest = ApiServiceGenerator().createServiceRF
            var xgBoost = ApiServiceGenerator().createServiceXGB
            var requestBody = RequestBody.create(MediaType.parse("multipart/form-data"), files[current])
            var body = MultipartBody.Part.createFormData("file", files[current].name ,requestBody)
            var algorithm = ""


            if(model.selectedalgorithm == 1){
                call = xgBoost.upload(body)
                algorithm = "Using Extreme Gradient Boost scan at ${Date()}"
            }else{
                call = rForest.upload(body)
                algorithm = "Using Random Forest scan at ${Date()}"
            }
            call.enqueue(object: retrofit2.Callback<ApiReponse>{
                override fun onResponse(call: Call<ApiReponse>, response: Response<ApiReponse>) {
                    if(response.isSuccessful){
                        Log.i("HELLO_MALWARE", response.body()!!.status!!)
                        binding.scanningAppName.text = "Success to scanning ${model.selected[current].label}"
                        model.result.add(AppInfoResult(model.selected[current].info,model.selected[current].label,
                            if(response.body()!!.status!! == "Berbahaya") "Dangerous Application"
                            else "Application Safe to use", algorithm, if(response.body()!!.status!! == "Berbahaya") "Dangerous" else "Safe to use", response.body()!!.malwareName ?: "-"))
                        if(current < (files.size - 1)){1
                            current++
                            checkAllFilesApp()
                        }else{
                            Log.i("HELLO_MALWARE", "Done")
                            findNavController().navigate(R.id.action_loadingFragment_to_resultFragment)
                        }
                    }
                }

                override fun onFailure(call: Call<ApiReponse>, t: Throwable) {
                    Log.i("HELLO_MALWARE", "onFailure: ${t.message}")
                    model.errorMessage = t.message.toString()
                    findNavController().navigate(R.id.action_loadingFragment_to_errorFragment);
                }
            })
        }catch (e: Exception){
            model.errorMessage = e.message.toString()
            findNavController().navigate(R.id.action_loadingFragment_to_errorFragment);
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        if(model.selectedalgorithm != 2){
            model.appInfos.forEach {
                it.isChecked = false
            }
            model.selectedalgorithm = 0
            model.selected = mutableListOf()
        }

        call.cancel()
    }
}